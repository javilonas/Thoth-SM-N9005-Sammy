#!/sbin/busybox sh
#
#  TPowerCC (Thoth Power Control Center)
#  ConfiguraciÃ³n para Thoth por Javilonas
#

REVISION=`cat /res/tpowercc/config.revision`

PROFILE_PATH=/data/.tpowercc
REVISION_PATH=$PROFILE_PATH/config.version
INIT_PROFILE=/res/tpowercc/init.profile
DEFAULT_PROFILE=$PROFILE_PATH/init.profile
OVERRIDE_PROFILE_DATA=$PROFILE_PATH/override.profile
OVERRIDE_PROFILE_RFS=/res/tpowercc/override.profile
INJECTION_PROFILE=/res/tpowercc/injection.profile
CONFIG_XML=$PROFILE_PATH/tpowercc.xml
ACTION_CACHE=$PROFILE_PATH/action.cache
TEMP_CONFIG=$PROFILE_PATH/.config.tmp
LAST_SELECTED=.active.profile
ACTIVE_PROFILE=${PROFILE_PATH}/${LAST_SELECTED}

read_dom () {
	local IFS=\>
	read -r ENTITY CONTENT
}

apply_config()
{
	make_cache
	
	CONFIG_BOOTED=false

	while read action param; do
		actionval=`source /res/tpowercc/actions/$action $action $param`
		read_defaults
		read_config
		CONFIG_BOOTED=false
		echo applying: /$action $action $param $actionval
		source /res/tpowercc/actions/$action $action $param $actionval
	done < $ACTION_CACHE

	CONFIG_BOOTED=true
}

make_cache()
{
	if [ ! -f $ACTION_CACHE ]; then
		touch $ACTION_CACHE
		chmod 777 $ACTION_CACHE
		
		while read_dom; do
			action=$(echo $ENTITY |  grep -v \<button | sed -e 's/action=/\naction=/g' | grep action | awk -F'"' '{print $2}')
			if [ "a$action" != a ]; then
				echo $action >> $ACTION_CACHE
			fi
		done < $CONFIG_XML
	fi
}

print_config()
{
  cat $CONFIG_XML
}

list_profile()
{
  ls -1 $PROFILE_PATH | grep \.profile | sed -e 's/.profile//g'
}

select_profile()
{
  if [ "a$1" == "a" ];
  then
    cat $ACTIVE_PROFILE
  else
    # if there is no such profile, create one
    _ACTIVE_PROFILE=`cat $ACTIVE_PROFILE`
    if [ ! -f ${PROFILE_PATH}/${_ACTIVE_PROFILE}.profile ];then
      cp $DEFAULT_PROFILE ${PROFILE_PATH}/${1}.profile
    fi
    if [ ! -f ${PROFILE_PATH}/${1}.profile ];then
      cp ${PROFILE_PATH}/${_ACTIVE_PROFILE}.profile ${PROFILE_PATH}/${1}.profile
    fi
    echo $1 > $ACTIVE_PROFILE
    chmod 777 ${PROFILE_PATH}/${1}.profile
  fi
}

delete_profile()
{
  if [ "`cat $ACTIVE_PROFILE`" == "$1" ];then
    select_profile "default"
  fi
  rm ${PROFILE_PATH}/${1}.profile
}

rename_profile()
{
  # move old profile to new
  mv ${PROFILE_PATH}/${1}.profile ${PROFILE_PATH}/${2}.profile

  # if old profile is active, set the new profile as active profile
  if [ "`cat $ACTIVE_PROFILE`" == "$1" ];then
    echo $2 > $ACTIVE_PROFILE
  fi
}

write_config()
{
  if [ "a$1" == "a" ];then
    _CONFIG_FILE=$PROFILE_PATH/`cat ${PROFILE_PATH}/${LAST_SELECTED}`.profile
  else
    _CONFIG_FILE=$PROFILE_PATH/${1}.profile
  fi

  rm -f $TEMP_CONFIG
  while IFS="=" read -r key value
  do
    if [ -n "$key" ];then
      evalexpr='eval "echo \$$key"'
      echo $key=`eval $evalexpr`
    fi
  done < $DEFAULT_PROFILE > $TEMP_CONFIG
  cp $TEMP_CONFIG $_CONFIG_FILE
  chmod 777 $_CONFIG_FILE
  rm -f $TEMP_CONFIG
}

read_config()
{
  if [ "a$1" == "a" ];then
    _CONFIG_FILE=$PROFILE_PATH/`cat ${PROFILE_PATH}/${LAST_SELECTED}`.profile
  else
    _CONFIG_FILE=${1}
  fi


  eval `sed -e 's/[[:space:]]*\=[[:space:]]*/=/g' \
    -e 's/;.*$//' \
    -e 's/[[:space:]]*$//' \
    -e 's/^[[:space:]]*//' \
    -e "s/^\(.*\)=\([^\"']*\)$/\1=\"\2\"/" \
   < $_CONFIG_FILE | grep = `
}

read_defaults ()
{
  read_config "$DEFAULT_PROFILE"
  _ACTIVE_PROFILE=`cat $ACTIVE_PROFILE`
}

# some initialization code

if [ ! -d $PROFILE_PATH ]; then
	mkdir $PROFILE_PATH
	chmod 777 $PROFILE_PATH
fi

CLEAN=false

if [ ! -f $REVISION_PATH ]; then
	echo $REVISION > $REVISION_PATH
	CLEAN=true
fi

if [ ! -f $DEFAULT_PROFILE ]; then
	cp $INIT_PROFILE $DEFAULT_PROFILE
	echo CONFIG_BOOTED=true >> $DEFAULT_PROFILE
	chmod 777 $DEFAULT_PROFILE
fi

if [ ! -f $PROFILE_PATH/$LAST_SELECTED -o "$REVISION" != "`cat $REVISION_PATH`" ]; then 
	echo default > $PROFILE_PATH/$LAST_SELECTED
	chmod 777 $PROFILE_PATH/$LAST_SELECTED
fi

if [ ! -f $PROFILE_PATH/default.profile ]; then
	cp $DEFAULT_PROFILE $PROFILE_PATH/default.profile
	chmod 777 $PROFILE_PATH/default.profile
fi

if [ ! -f $CONFIG_XML -o "$REVISION" != "`cat $REVISION_PATH`" ]; then
	source /res/tpowercc/tpowercc.xml.generate
fi

if [ -f $ACTION_CACHE -a "$REVISION" != "`cat $REVISION_PATH`" ]; then
	rm $ACTION_CACHE
	make_cache
fi

if [ "$REVISION" -gt "`cat $REVISION_PATH`" -a $CLEAN != true ]; then
	cat $INJECTION_PROFILE >> $DEFAULT_PROFILE
fi

if [ -f $OVERRIDE_PROFILE_DATA -o "$REVISION" != "`cat $REVISION_PATH`" ]; then
	read_defaults
	if [ "$REVISION" != "`cat $REVISION_PATH`" ]; then
		read_config $OVERRIDE_PROFILE_RFS
	fi

	write_config init
	read_config

	if [ "$REVISION" != "`cat $REVISION_PATH`" ]; then
		read_config $OVERRIDE_PROFILE_RFS
	fi

	if [ -f $OVERRIDE_PROFILE_DATA ]; then
		read_config $OVERRIDE_PROFILE_DATA
	fi

	write_config

	rm $OVERRIDE_PROFILE_DATA
	echo $REVISION > $REVISION_PATH
	/res/init_uci.sh $1 $2 $3 $4 $5 $6
	exit 0
fi
